foldl : {a, b, n} (fin n) => (a -> b -> a) -> a -> [n]b -> a
foldl f acc xs = ys ! 0
  where ys = [acc] # [f a x | a <- ys | x <- xs]

zip : {a,b,n} [n]a -> [n]b -> [n](a,b)
zip xs ys = [(x,y) | x <- xs | y <- ys]

zipWith : {a,b,c,n} (a -> b -> c) -> [n]a -> [n]b -> [n]c
zipWith f xs ys = [f x y | x <- xs | y <- ys]

leq : {a} (fin a) => [a*8] -> [a*8] -> Bit
leq x y = res.0 || res.1
  where
    res = foldl f (True, False) (bs x y)

    f (acc_eq, acc_lt) (z_eq, z_lt) = (eq, lt)
      where
        eq = acc_eq && z_eq
        lt = acc_lt || acc_eq && z_lt

bs : {a} (fin a) => [a*8] -> [a*8] -> [a](Bit,Bit)
bs x y = zip eqs lts
  where
    eqs = zipWith ((==) : [8] -> [8] -> Bit) (split x) (split y)
    lts = zipWith ((<)  : [8] -> [8] -> Bit) (split x) (split y)

comparison_algorithm : [128] -> [128] -> Bit
property comparison_algorithm x y = leq x y == x <= y

classifier : [80] -> Bit
classifier inp = foldl (&&) True (zipWith (<=) xs ys)
  where
    [xs,ys] = split (split inp) : [2][5][8]

substring8 : ([64], [64]) -> Bit
substring8 (x',y') = foldl (||) False zs
  where
    x = split x' : [8][8]
    y = split y' : [8][8]
    zs = [ take (x <<< i) == y | i <- ([0..7] : [8][64]) ]

substring16 : ([128], [64]) -> Bit
substring16 (x',y') = foldl (||) False zs
  where
    x = split x' : [16][8]
    y = split y' : [8][8]
    zs = [ take (x <<< i) == y | i <- ([0..15] : [16][64]) ]

substring32 : ([256], [64]) -> Bit
substring32 (x',y') = foldl (||) False zs
  where
    x = split x' : [32][8]
    y = split y' : [8][8]
    zs = [ take (x <<< i) == y | i <- ([0..31] : [32][64]) ]

substring64 : ([512], [64]) -> Bit
substring64 (x',y') = foldl (||) False zs
  where
    x = split x' : [64][8]
    y = split y' : [8][8]
    zs = [ take (x <<< i) == y | i <- ([0..63] : [64][64]) ]
